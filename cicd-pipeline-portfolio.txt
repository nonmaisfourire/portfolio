# Production CI/CD Pipeline with Blue-Green Deployment
# 
# Features:
# - Multi-environment deployment (staging/production)
# - Security scanning with Trivy and GitLeaks
# - Automated testing with coverage reports
# - Blue-green deployment strategy
# - Automatic rollback on failure
# - Docker image caching for performance
# - Health checks and smoke tests

name: Deploy to Production

on:
  push:
    branches: [main, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.12'
  DOCKER_BUILDKIT: 1

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # ============================================================
  # INITIALIZATION
  # ============================================================
  init:
    name: Initialize Pipeline
    runs-on: ubuntu-latest
    outputs:
      deploy_env: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
          else
            echo "version=dev-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

  # ============================================================
  # SECURITY SCANNING
  # ============================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [init]
    continue-on-error: true
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================
  # TESTING
  # ============================================================
  test:
    name: Test & Quality
    runs-on: ubuntu-latest
    needs: [init, security]
    if: github.event.inputs.skip_tests != 'true'
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8

      - name: Lint code
        run: |
          black --check backend/
          flake8 backend/ --max-line-length=120

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          pytest backend/tests \
            --cov=backend/app \
            --cov-report=xml \
            --cov-report=term-missing \
            -v

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # ============================================================
  # BUILD & PUSH
  # ============================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [init, test]
    if: |
      success() && 
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=${{ needs.init.outputs.version }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.init.outputs.version }}
            BUILD_DATE=${{ github.event.repository.updated_at }}

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.init.outputs.version }}" >> $GITHUB_OUTPUT

  # ============================================================
  # DEPLOY TO STAGING
  # ============================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [init, build]
    if: needs.init.outputs.deploy_env == 'staging'
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/app
            docker pull ${{ needs.build.outputs.image }}
            docker compose down
            IMAGE_TAG=${{ needs.init.outputs.version }} docker compose up -d
            docker compose exec -T web alembic upgrade head
            docker system prune -f

      - name: Health check
        run: |
          sleep 30
          curl -f https://staging.example.com/health || exit 1

  # ============================================================
  # DEPLOY TO PRODUCTION
  # ============================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [init, build, deploy-staging]
    if: |
      always() && 
      needs.init.outputs.deploy_env == 'production' &&
      (needs.deploy-staging.result == 'success' || needs.deploy-staging.result == 'skipped')
    environment:
      name: production
      url: https://api.example.com
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Blue-Green Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/app
            
            # Backup database
            docker compose exec -T postgres pg_dump -U postgres app_db | gzip > backup_$(date +%Y%m%d_%H%M%S).sql.gz
            
            # Pull new image
            docker pull ${{ needs.build.outputs.image }}
            
            # Blue-green deployment
            docker compose up -d --no-deps --scale web=2 web
            sleep 30
            
            # Run migrations
            docker compose exec -T web alembic upgrade head
            
            # Switch traffic
            docker compose up -d --no-deps --remove-orphans web
            
            # Cleanup
            docker system prune -f

      - name: Smoke tests
        id: smoke
        run: |
          sleep 30
          curl -f https://api.example.com/health || exit 1
          curl -f https://api.example.com/api/v1/version || exit 1

      - name: Rollback on failure
        if: failure() && steps.smoke.outcome == 'failure'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/app
            
            # Rollback to previous version
            docker compose down
            docker compose up -d
            
            # Restore database if needed
            LATEST_BACKUP=$(ls -t backup_*.sql.gz | head -1)
            if [[ -n "$LATEST_BACKUP" ]]; then
              gunzip -c "$LATEST_BACKUP" | docker compose exec -T postgres psql -U postgres app_db
            fi

  # ============================================================
  # NOTIFICATION
  # ============================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.init.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.init.outputs.deploy_env }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.init.outputs.deploy_env }}" == "staging" ]]; then
            echo "- Deploy Staging: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Deploy Production: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          fi